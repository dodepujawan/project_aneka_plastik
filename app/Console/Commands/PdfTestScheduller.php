<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use Illuminate\Support\Facades\Log;
use mPDF;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Storage;


class PdfTestScheduller extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'pdf_test';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Command description';

    /**
     * Execute the console command.
     *
     * @return int
     */
//     public function handle()
// {
//     Log::info("Scheduler PDF pertama mulai...");

//     try {
//         // HTML sederhana untuk test
//         $html = "<html><body><h1>Test PDF</h1><p>This is a simple test PDF generated by mPDF.</p></body></html>";

//         // Generate PDF
//         $mpdf = new \Mpdf\Mpdf();
//         $mpdf->WriteHTML($html);
//         Log::info("PDF berhasil digenerate");

//         // Simpan PDF langsung ke storage app
//         $filePath = storage_path('app/test_order_report.pdf'); // Menyimpan langsung ke storage/app tanpa subfolder
//         $mpdf->Output($filePath, 'F');
//         Log::info("PDF berhasil disimpan di: " . storage_path("app/$filePath"));

//     } catch (\Exception $e) {
//         Log::error("Gagal generate PDF: " . $e->getMessage());
//     }
// }
public function handle()
{
    Log::info("Scheduler PDF pertama mulai...");

    try {
        $transaction = DB::table('po_userby as a')
            ->leftJoin('po_online as b', DB::raw('a.no_invoice COLLATE utf8mb4_unicode_ci'), '=', 'b.no_invoice')
            ->leftJoin('mcustomer as c', DB::raw('a.user_kode COLLATE utf8mb4_unicode_ci'), '=', 'c.CUSTOMER')
            ->leftJoin('users as d', DB::raw('a.user_id COLLATE utf8mb4_unicode_ci'), '=', 'd.user_id')
            ->select([
                'a.no_invoice',
                'a.user_id',
                DB::raw('DATE_FORMAT(a.created_at, "%d-%m-%Y") AS created_at'),
                'a.user_kode',
                'b.kd_brg',
                'b.nama_brg',
                'c.NAMACUST as nama_cust',
                'd.name',
                DB::raw('CAST(b.qty_order AS UNSIGNED) AS qty_order'),
                DB::raw('CAST(b.qty_unit AS UNSIGNED) AS qty_unit'),
                DB::raw('CAST(b.qty_sup AS UNSIGNED) AS qty_sup'),
                'b.satuan',
                DB::raw('CAST(b.harga AS UNSIGNED) AS harga'),
                DB::raw('CAST(b.disc AS UNSIGNED) AS disc'),
                DB::raw('CAST(b.total AS UNSIGNED) AS total'),
                'b.rcabang'
            ])
            // ->where('b.status_po', 1)
            // ->where('a.no_invoice', $invoice_number)
            ->get();

        if (!$transaction) {
            return redirect()->route('error_page')->with('message', 'Invoice not found');
        }

        $html = view('pdf.po_online_app', compact('transaction'))->render();

        $mpdf = new \Mpdf\Mpdf();
        $mpdf->WriteHTML($html);
        Log::info("PDF berhasil digenerate");
        // $mpdf->Output('PO_online.pdf', 'I');
        $filePath = storage_path('app/test_order_report.pdf'); // Menyimpan langsung ke storage/app tanpa subfolder
        $mpdf->Output($filePath, 'F');
        Log::info("PDF berhasil disimpan di: " . storage_path("app/$filePath"));

    } catch (\Exception $e) {
        Log::error("Gagal generate PDF: " . $e->getMessage());
    }
}

}
